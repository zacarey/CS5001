<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>01</key>
	<string>To begin, we need to build a max heap. In a max heap, all the parents are greater than or equal to their children.</string>
	<key>01.2</key>
	<string>To build a max heap, the last parent node, which is &quot;2&quot;, is targeted. &quot;2&quot; has a child, &quot;8&quot;. </string>
	<key>02</key>
	<string>Since, &quot;8&quot; is greater than its parent. Swap &quot;8&quot; and &quot;2&quot;.</string>
	<key>02.1</key>
	<string>Then, the next parent node is analyzed. This time, &quot;3&quot; is the parent.</string>
	<key>02.2</key>
	<string>&quot;3&quot; has two children &quot;7&quot; and &quot;0&quot;.</string>
	<key>03</key>
	<string>&quot;7&quot; is the greatest number, so &quot;7&quot; and &quot;3&quot; are swapped.</string>
	<key>03.1</key>
	<string>Again, the next parent node is analyzed. This time, &quot;4&quot; is the parent.</string>
	<key>03.2</key>
	<string>&quot;4&quot; has two children &quot;7&quot; and &quot;8&quot;.</string>
	<key>04</key>
	<string>&quot;8&quot; is the greatest number, so &quot;8&quot; and &quot;4&quot; are swapped. And, now we have a max heap.</string>
	<key>05</key>
	<string>Swap the root of the max heap with the last node.</string>
	<key>06</key>
	<string>Then, take out the last node of the heap and put it back to the list. </string>
	<key>06.1</key>
	<string>Now, we need to build a max heap again. The parent node &quot;2&quot; is analyzed. </string>
	<key>06.2</key>
	<string>&quot;2&quot; has two children &quot;7&quot; and &quot;4&quot;. </string>
	<key>07</key>
	<string>&quot;7&quot; is the greatest number, so &quot;7&quot; and &quot;2&quot; are swapped.</string>
	<key>07.1</key>
	<string>The parent node &quot;2&quot; is analyzed. </string>
	<key>07.2</key>
	<string>&quot;2&quot; has two children &quot;3&quot; and &quot;0&quot;.</string>
	<key>08</key>
	<string>&quot;3&quot; is the greatest number, so &quot;3&quot; and &quot;2&quot; are swapped. And, now we have a max heap again. </string>
	<key>09</key>
	<string>Swap the root of the max heap with the last node.</string>
	<key>10</key>
	<string>Then, take out the last node of the heap and put it back to the list. </string>
	<key>11</key>
	<string>The same operations are repeated until all of the numbers are fully sorted</string>
	<key>12</key>
	<string>The same operations are repeated until all of the numbers are fully sorted</string>
	<key>13</key>
	<string>The same operations are repeated until all of the numbers are fully sorted</string>
	<key>14</key>
	<string>The same operations are repeated until all of the numbers are fully sorted</string>
	<key>15</key>
	<string>The same operations are repeated until all of the numbers are fully sorted</string>
	<key>16</key>
	<string>The same operations are repeated until all of the numbers are fully sorted</string>
	<key>17</key>
	<string>The same operations are repeated until all of the numbers are fully sorted</string>
	<key>18</key>
	<string>The same operations are repeated until all of the numbers are fully sorted</string>
	<key>19</key>
	<string>The same operations are repeated until all of the numbers are fully sorted</string>
	<key>20</key>
	<string>The same operations are repeated until all of the numbers are fully sorted</string>
	<key>21</key>
	<string>The same operations are repeated until all of the numbers are fully sorted</string>
	<key>end</key>
	<string></string>
</dict>
</plist>
